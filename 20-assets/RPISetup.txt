Alright, so you want an rpi setup as a web server. I assume your current plan is to appropriate the raspberry pi 2 from work and use that. You might want to just get a new model 3 instead that came out recently. It's much more powerful and has on board wifi and bluetooth so you don't have to mess with the dongles or ethernet cables. This is also the version I have so it would be much easier for me to help troubleshoot. The board only is $36 : http://smile.amazon.com/dp/B01CD5VC92 and it you want to get it with a case and power supply, the best deal I found was $49: http://smile.amazon.com/dp/B01C6EQNNK . The case might not be a bad idea since you want to set it and forget it and the newer model 3 needs a 2+A power supply so it's a good deal to get both for $13.

You'll need a Micro SD card for either pi and I don't know if you have one but they're not expensive: http://smile.amazon.com/dp/B00IVPU786 . Any size above 8GB will be fine. If you do have a Micro SD card check the speed rating (either a number in a circle or a number in a U) because you might want to get a faster one like I linked. If it's an 8 in a circle or lower(or not specified) I recommend you get a new one.

The rpi uses HDMI for video out so you can either connect to your TV or get an HDMI to DVI adapter to connect it to your monitor. I think you bought a really huge cable that does this. You'll also need a USB mouse and keyboard to use with it.

Once you have everything, you need to download the OS for it ( https://www.raspberrypi.org/downloads/noobs/ ) and then put it on the Micro SD card ( https://www.raspberrypi.org/documentation/installation/noobs.md ). If you have a bigger SD Card you may have trouble formatting it as FAT32. Here is a page for help on that: https://www.raspberrypi.org/documentation/installation/sdxc_formatting.md .

After the files are on the Micro SD card you'll put it into the pi and start it by just plugging it in (there is no power switch). There are several OS options but I highly recommend you install Raspbian because it has the biggest support base and is what I assume you have for all this. The default password for the user is "raspberry".

Once that is installed you will have a working ARM based linux PC. From here you can start getting the web server stuff setup. You will want to use apache for you web server, again because of support base, here is a guide for getting that set up: https://www.raspberrypi.org/documentation/remote-access/web-server/apache.md . That guide goes on to setup PHP which you probably wont need so you don't need to do that.

Now is a decision, most ISPs block the default HTTP port 80 so you wont be able to just use the URL "http://eggplantindustries.com" to get to the website. There are two ways to get around this. The easier way is to set a custom port for HTTP, 8080 is common, which would make you use the URL  "http://eggplantindustries.com:8080" to connect. Here is how you do that: http://www.noveldevices.co.uk/rp-webserverport . The more complicated way is to setup an SSL certificate and use port 443 for HTTPS which would make your URL "https://eggplantindustries.com". Setting up an SSL certificate isn't too bad, here is basically what you would do: https://hallard.me/enable-ssl-for-apache-server-in-5-minutes/ but you would skip the certificate creation part and do this instead https://blog.meinside.pe.kr/Lets-Encrypt-with-Raspberry-Pi/ . I can offer more help with that if you decide to go that route. For the rest of this explanation I'll use "http://eggplantindustries.com:8080" as the URL.

After all that is setup the last step will be to make your web server publicly accessible, I'm going to assume your domain is already pointed at your house's IP address. You will need forward whichever port you used to your rpi. You will need your rpi's local IP address which you can get by running the command `hostname -I` in a terminal. There is no magic bullet link I can give you to tell you how to port forward on your router because they are all different. Here is a site that tries to catalog how to do it on every router so directions for yours may be on there: http://portforward.com/ .

---------------------------------- Setup Complete ----------------------------------

At this point you should now have a functional web server and have a publicly accessible site. Now to put your "EGGPLANT SUCKS.htm" file(If you don't remove the space you'll have to put "%20" in the URL where it is) on the site you will need to copy it to the directory `/var/www/html`. Website file permissions can be tricky but if it works you should be able to access your file at: http://eggplantindustries.com:8080/EGGPLANT%20SUCKS.htm . If that doesn't work or you can't copy the file to the folder you will need to get the permissions set correctly. Installs of apache can be different on different platforms so I'm not 100% sure what to link you to here but this: http://fideloper.com/user-group-permissions-chmod-apache is a good basic explanation of the permissions command and what I believe will make it work. You may need to switch to the root user to copy or for those command. run "sudo su" to do that.

You should now have everything installed to run a website and have a basic understanding of how to put files on it. From here to get the DMM information there are the ways I mentioned earlier. I'm going to break it out to four options this time though. I will go through them in more detail here.

1. Use the GUI

For this method you would use the existing DMM software and log to a file like normal. You would have to install the PySerial and PySide dependencies on the rpi(I'm not 100% sure this is possible but I give it a high likelihood). You would then use the GUI to setup the logging session. After starting the data logging you would run a command similar to this in a terminal "while true; cp data.log /var/www/html/data.log; sleep 1; done". This would copy the log file to the website folder every second (you can enter smaller numbers like 0.5 to make it sooner but the response time of the server to refresh the page will probably be slower than that so it is fairly pointless). You could then view the log at: http://eggplantindustries.com:8080/data.log and you would refresh to get the newest version. Your web browser might try to make you download this file instead of let you view it. You could get around this by changing the copy command to "while true; cp data.log /var/www/html/data.txt; sleep 1; done" so it ends in ".txt" which the browser should show.

2. Create a CLI version

For this I would modify the GUI code to save and accept a file with all the settings pre-configured so you could just run "34401AInterface.py -cli settings.cfg" and it would start logging with no GUI. You would still need to run the copy command to get the log file on the website. This would make it so the server could be automated to the point where you just plug in the rpi and it would automatically start the data logging. The code modifications for this would be mostly checking if the program was launched with "-cli" and then reading all the settings from the file and the automatically starting.

3. CLI with database

The CLI version could have access to a real database added. It would use MySQL running on the rpi and save the data through commands to the database. A custom website would then be written to fetch the data from the database or you could install a database manager such as PHPMyAdmin which would allow you to view, manage, and export the data how you want. Going this route would be a lot more efficient than refreshing a file over and over again but would take more time to implement.

4. Full web DMM integration for control

The DMM driver was written in python and you can write the backend for a website in python(it's what Google uses). A full web interface could be written to configure, start, track, graph, etc the logging from a web page. It would essentially become a web controlled DMM. The website could even be written to make in fully manageable from your phone. Once there is a complete web interface to the DMM some pretty cool things can be done. This is by far the most complicated and time consuming option because all the the GUI code would be thrown out and new web code created from scratch.
